<?php
/**
 * @file
 * Test Auto Login URL module works as expected.
 */

/**
 * AutoLoginUrlTestCase Class.
 */
class AutoLoginUrlTestCase extends BackdropWebTestCase {

  /**
   * Set-up function.
   */
  public function setUp() {
    parent::setUp();
    $this->resetAll();

    module_enable(array(
      'auto_login_url',
    ), TRUE);
    $this->resetAll();

  }

  /**
   * Test token generation.
   */
  public function testAluTokenGenerationCheck() {

    // Create user.
    $user = $this->backdropCreateUser();

    // Create an auto login url for this user.
    $url = auto_login_url_create($user->uid, 'user/' . $user->uid);

    debug('Generated URL is: ' . $url);

    // Access url.
    $this->backdropGet($url);

    // Make assertions.
    $this->assertResponse(200, t('User logged in successfully.'));
    $this->assertText($user->name, t('User name is visible, hence user is logged in.'));

    // Create another user and login again.
    $user2 = $this->backdropCreateUser();

    // Create an auto login url for this user.
    $url = auto_login_url_create($user2->uid, 'user/' . $user2->uid);

    debug('Generated URL is: ' . $url);

    // Access url.
    $this->backdropGet($url);

    // Make assertions.
    $this->assertResponse(200, t('User 2 logged in successfully.'));
    $this->assertText($user2->name, t('User 2 name is visible, hence user is logged in.'));
  }

  /**
   * Test token generation with different settings.
   */
  public function testAluSettingsCheck() {

    // Change settings.
    $config = config('auto_login_url.settings');
    $config->set('auto_login_url_token_length', 6);
    $config->set('auto_login_url_secret', 'new secret');
    $config->set('auto_login_url_short_url', 'alu');
    $config->save();

    // Clear menu cache.
    menu_rebuild();

    // Create user.
    $user = $this->backdropCreateUser();

    // Create an auto login url for this user.
    $url = auto_login_url_create($user->uid, 'user/' . $user->uid);

    debug('Generated URL is: ' . $url);

    // Access url.
    $this->backdropGet($url);

    // Make assertions.
    $this->assertResponse(200, t('User logged in successfully.'));
    $this->assertText($user->name, t('User name is visible, hence user is logged in.'));
  }

  /**
   * Test flood.
   */
  public function testAluFloodCheck() {

    // Set failed attempts to 5 for easier testing.
    config_set('user.flood', 'flood_ip_limit', 5);

    // Create user.
    $user = $this->backdropCreateUser();

    // Access 10 false URLs. Essentially triggering flood.
    for ($i = 1; $i < 6; $i++) {
      $this->backdropGet('autologinurl/' . $i . '/some-token' . $i);
      $this->assertResponse(403, t('Got access denied page.'));
    }

    // Generate actual auto login url for this user.
    $url = auto_login_url_create($user->uid, 'user/' . $user->uid);

    debug('Generated URL is: ' . $url);

    // Access url.
    $this->backdropGet($url);

    // Make assertions.
    $this->assertResponse(403, t('Got access denied page.'));
    // @todo we get a 403, but no message.
    // $this->assertText(t('Sorry, too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later.'), 'Cannot login message visible.');

    // Clear flood table.
    db_truncate('flood')->execute();

    // Try to login again.
    $this->backdropGet($url);
    $this->assertResponse(200, t('User logged in successfully.'));
    $this->assertText($user->name, t('User name is visible, hence user is logged in.'));
  }
}
