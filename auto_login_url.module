<?php

/**
 * @file
 * Install file.
 */

/**
 * Implements hook_menu().
 */
function auto_login_url_menu() {
  $items['autologinurl/%'] = array(
    'title' => 'Auto Login',
    'page callback' => '_auto_login_url_page',
    'page arguments' => array(1),
    'access callback' => '_auto_login_url_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Auto login the user.
 *
 * @param string $hash
 *   Code that passes through URL.
 */
function _auto_login_url_page($hash) {
  // Get if the hash is in the db.
  $result = db_select('auto_login_url', 'a')
    ->fields('a', array('uid', 'destination'))
    ->condition('hash', hash('sha256', $hash), '=')
    ->execute()
    ->fetchAssoc();

  if (count($result) > 0) {
    // Auto login the user.
    global $user;
    $current_user = user_load($result['uid']);

    // Update the user table timestamp noting user has logged in.
    $current_user->login = REQUEST_TIME;
    db_update('users')
      ->fields(array('login' => $current_user->login))
      ->condition('uid', $current_user->uid)
      ->execute();

    $user = $current_user;

    // Regenerate the session ID to prevent against session fixation attacks.
    drupal_session_regenerate();

    // A generic array for arguments.
    $url_array = array();

    // Get destination URL.
    $destination = urldecode($result['destination']);

    // Account for anchor.
    if (strrpos($destination, '#') !== FALSE) {
      $fragment = substr($destination, strrpos($destination, '#') + 1);

      $url_array['fragment'] = $fragment;
      $url_array['alias'] = TRUE;

      $destination = substr($destination, 0, strrpos($destination, '#'));
    }

    if (count($url_array)) {
      drupal_goto($destination, $url_array);
    }
    else {
      drupal_goto($destination);
    }

  }
  else {
    drupal_goto('');
  }
}

/**
 * Access check for Auto login the user.
 *
 * @param string $hash
 *   Code that passes through URL.
 */
function _auto_login_url_access($hash) {
  return !empty($hash);
}

/**
 * Create an auto login hash on demand.
 *
 * @param int $uid
 *   User id.
 * @param string $destination
 *   Destination URL.
 * @param bool $absolute
 *   Absolute or relative link.
 *
 * @return string
 *   Autologin URL.
 */
function auto_login_url_create($uid, $destination, $absolute = FALSE) {
  // Generate hash.
  $hash = hash('sha256', $uid . '-' . time() . '-' . $destination);
  // Generate hash to save to DB.
  $hash_db = hash('sha256', $hash);

  // Insert a new hash.
  db_insert('auto_login_url')
    ->fields(array('uid', 'hash', 'destination', 'timestamp'))
    ->values(array(
        'uid' => $uid,
        'hash' => $hash_db,
        'destination' => $destination,
      	'timestamp' => time(),
      ))
    ->execute();

  // Check if link is absolute.
  $absolute_path = '';
  if ($absolute) {
    global $base_url;
    $absolute_path = $base_url . '/';
  }

  return $absolute_path . 'autologinurl/' . $hash;
}

/**
 * Convert a whole text(E.g. mail with autologin links).
 *
 * @param int $uid
 *   User id.
 * @param string $text
 *   Text to change links to.
 *
 * @return string
 *   The text with changed links.
 */
function auto_login_url_convert_text($uid, $text) {

  global $base_root;
  // A pattern to convert links, but not images.
  $pattern = '/' . str_replace('/', '\\/', $base_root) . '\\/[a-z0-9A-Z%\/\._-]*/';

  // Create a new object and pass the uid.
  $current_conversion = new AutoLoginUrlConvertTextClass($uid);

  // Replace text with regex/callback.
  $text = preg_replace_callback(
    $pattern,
    array(&$current_conversion, 'replace'),
    $text);

  return $text;
}

/**
 * Class to use for callback of link replacement.
 *
 * @author Thanos
 */
class AutoLoginUrlConvertTextClass {

  /**
   * Constructor.
   *
   * @param int $uid
   *   User ID.
   */
  public function __construct($uid) {
    $this->uid = $uid;
  }

  /**
   * Replace each link in the text.
   *
   * @param array $matches
   *   Matches array.
   *
   * @return string
   *   Converted URL.
   */
  public function replace(array $matches) {
    // Make a new search to check that the link is not image.
    // I know, not very clean.
    $pattern = '/(\.jpg|\.gif|\.png)/';
    preg_match($pattern, $matches[0], $new_matches);
    if (count($new_matches) > 0) {
      return $matches[0];
    }
    else {
      return auto_login_url_create($this->uid, $matches[0], TRUE);
    }
  }
}

/**
 * Implements hook_cron().
 */
function auto_login_url_cron() {
  // Delete over one month auto logins.
  db_delete('auto_login')
    ->condition('timestamp', date('c', time() - 2592000), '<=')
    ->execute();
}

/**
 * Implements hook_token_info().
 */
function auto_login_url_token_info() {

  // Add new tokens.
  $info = array();

  // Home token.
  $info['tokens']['user']['auto-login-token'] = array(
    'name' => t("Auto login"),
    'description' => t('This an auto login token for the user.'),
  );

  // Link that goes to user edit page.
  $info['tokens']['user']['auto-login-url-account-edit-token'] = array(
    'name' => t("Auto login account"),
    'description' => t('This an auto login for the user account page.'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function auto_login_url_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'user') {
    $user = $data['user'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'auto-login-url-token':
          $replacements[$original] = auto_login_url_create($user->uid, 'home', TRUE);
          break;

        case 'auto-login-url-account-edit-token':
          $replacements[$original] = auto_login_url_create($user->uid, 'user/' . $user->uid . '/edit', TRUE);
          break;

      }
    }
  }

  return $replacements;
}
